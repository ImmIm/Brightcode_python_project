@startuml Reversi

package model {

    abstract class TurnBaseGame {
    change_player()
    make_move()
    }

    abstract class GameRules {
    check_validity_of_move()
    define_winner()
    }

    class ReverciGameRules {
        params : difficulty
        board : Board
        p_one_score : int
        p_two_score : int
        size : int
        set_up()
        check_validity_of_move()
        define_winner()
    }

    ReversiGame *-- ReverciGameRules
    ReverciGameRules *-- Board
    ReverciGameRules <|-- GameRules

    class ReversiGame {
        board : Board
        current_player : Player
        other_player : Player
        rules : Rules
        size : int
        change_player()
        create_second_player()
        make_move()
    }

    ReversiGame <|-- TurnBaseGame


    abstract class Player {
        make_move()
    }


    abstract class AiPlayer {
        make_move()
        calculate_move()
    }

    class AiDumbPlayer {
        size : int
        value: int
        make_move()
    }

    class AiSmartPlayer {
        size : int
        value : int
        difficulty : int
        rules_parameters : difficulty
        game : Game
        make_move()
        calculate_move()
        minmax()
    }


    class HumanPlayer {
        size : int
        value : int
        make_move()
    }


    AiPlayer <|-- Player
    HumanPlayer <|-- Player
    AiDumbPlayer <|-- AiPlayer
    AiSmartPlayer <|-- AiPlayer

    ReversiGame *-- HumanPlayer
    ReversiGame *-- AiDumbPlayer
    ReversiGame *-- AiSmartPlayer


    class Board {
        size
        board : list[list[BoardCell]]
        get_cell()
        update_cell()
        change_look()
        look_to_default()
    }

    class BoardCell {
        value : int
        look : string
        change_look()
        default_look()
        update_cell()
        change_default_visuals()
    }

    Board *-- BoardCell
    ReversiGame *-- Board

}

package view {
    abstract class View {
    start_message()
    render()
    }

    class BoardConsoleView {
        board
        render_board()
    }



    class ReversiConsoleView {
        start_message()
        display_menu()
        render()
    }

    class ReversiGraphicalUi {
        display_menu()
        display_game()
        render()
    }

    ReversiConsoleView <|-- View
    ReversiGraphicalUi <|-- View
    BoardConsoleView <|-- View

}


package controller {
    abstract class Controller {
    game : Game
    view : View
    start_game()
    }

    class ReversiConsoleController {
        game : ReversiGame
        view : ReversiConsoleView
        board_view : BoardConsoleView
        start_game()
        generate_game_results()
    }
}





package Exeptions {

    class WrongMoveError{
        move : tupple
        player : int
    }

    class CellOutOfRangeError{
        row : int
        col : int
        size : int
    }

    class InvalidCellValueError {
        value : int
    }

    class InvalidVisualsKeyError {
        key : string
    }

    class MoveOnPlayerCellError {
        move : tupple
        player : int
    }

    class NoPossibleMovesError {
        move : tupple
        player : int
    }


MoveOnPlayerCellError <|-- WrongMoveError
NoPossibleMovesError<|-- WrongMoveError
}





ReversiConsoleController <|-- Controller


ReversiConsoleController *-- ReversiConsoleView
ReversiConsoleController *-- BoardConsoleView
ReversiConsoleController *-- ReversiGame


@enduml